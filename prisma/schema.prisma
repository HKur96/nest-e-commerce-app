generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// =========================
/// ENUMS
/// =========================
enum Role {
  ADMIN
  SELLER
  USER
}

enum CollectionType {
  FEATURED
  BEST_SELLERS
  NEW_ARRIVAL
  TOP_RATED
  SPECIAL_OFFERS
  NEWS
}

enum DeliveryKind {
  REGULAR
  EXPRESS
  SAME_DAY
}

/// =========================
/// LOCATION TABLES
/// =========================
model Province {
  id      Int       @id @default(autoincrement())
  name    String
  cities  City[]
  Address Address[]
}

model City {
  id           Int           @id @default(autoincrement())
  name         String
  provinceId   Int
  province     Province      @relation(fields: [provinceId], references: [id])
  subdistricts Subdistrict[]
  Address      Address[]

  @@index([provinceId])
}

model Subdistrict {
  id      Int       @id @default(autoincrement())
  name    String
  cityId  Int
  city    City      @relation(fields: [cityId], references: [id])
  wards   Ward[]
  Address Address[]

  @@index([cityId])
}

model Ward {
  id            Int         @id @default(autoincrement())
  name          String
  subdistrictId Int
  subdistrict   Subdistrict @relation(fields: [subdistrictId], references: [id])
  Address       Address[]

  @@index([subdistrictId])
}

/// =========================
/// CORE TABLES
/// =========================
model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  name           String
  avatarUrl      String?
  phoneNumber    String?
  role           Role             @default(USER)
  addresses      Address[]
  seller         Seller?
  carts          Cart[]
  wishlists      Wishlist[]
  orders         Order[]
  reviews        Review[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  SellerFollower SellerFollower[]

  @@index([role])
}

model Seller {
  id              Int              @id @default(autoincrement())
  userId          Int              @unique
  user            User             @relation(fields: [userId], references: [id])
  merchantName    String
  merchantLogoUrl String
  isOfficial      Boolean          @default(false)
  rate            Float            @default(0)
  detailLocation  String?
  products        Product[]
  followers       SellerFollower[]
  addressId       Int?
  address         Address?         @relation(fields: [addressId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model SellerFollower {
  id        Int      @id @default(autoincrement())
  sellerId  Int
  userId    Int
  seller    Seller   @relation(fields: [sellerId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([sellerId, userId])
  @@index([sellerId])
  @@index([userId])
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id])
  provinceId    Int
  province      Province    @relation(fields: [provinceId], references: [id])
  cityId        Int
  city          City        @relation(fields: [cityId], references: [id])
  subdistrictId Int
  subdistrict   Subdistrict @relation(fields: [subdistrictId], references: [id])
  wardId        Int
  ward          Ward        @relation(fields: [wardId], references: [id])
  streetName    String // âœ… free text field for street name
  detail        String? // house number, RT/RW, etc.
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  Seller        Seller[]

  @@index([userId])
  @@index([provinceId])
  @@index([cityId])
  @@index([subdistrictId])
  @@index([wardId])
}

model Category {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  iconUrl   String?
  parentId  Int?
  parent    Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children  Category[] @relation("CategoryToCategory")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  products  Product[]

  @@index([parentId])
}

model Product {
  id           Int                 @id @default(autoincrement())
  name         String
  slug         String              @unique
  description  String
  price        Decimal             @db.Decimal(10, 2)
  stock        Int                 @default(0)
  totalSold    Int                 @default(0)
  sellerId     Int
  categoryId   Int
  seller       Seller              @relation(fields: [sellerId], references: [id])
  category     Category            @relation(fields: [categoryId], references: [id])
  images       ProductImage[]
  variants     ProductVariant[]
  reviews      Review[]
  collections  CollectionProduct[]
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  Cart         Cart[]
  Wishlist     Wishlist[]
  OrderProduct OrderProduct[]

  @@index([sellerId])
  @@index([categoryId])
  @@index([price])
  @@index([createdAt])
  @@index([categoryId, price])
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int
  url       String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model ProductVariant {
  id        Int     @id @default(autoincrement())
  productId Int
  name      String
  value     String
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  comment   String?
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@index([productId])
  @@index([userId])
}

model Cart {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int     @default(1)
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Wishlist {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
}

model Order {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  totalPrice    Decimal         @db.Decimal(10, 2)
  deliveryId    Int
  delivery      DeliveryService @relation(fields: [deliveryId], references: [id])
  status        String          @default("pending")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  orderProducts OrderProduct[]

  @@index([userId])
  @@index([deliveryId])
  @@index([status])
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model DeliveryService {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  icon      String?
  kind      DeliveryKind
  createdAt DateTime     @default(now())
  Order     Order[]

  @@index([kind])
}

model Collection {
  id        Int                 @id @default(autoincrement())
  type      CollectionType
  name      String
  products  CollectionProduct[]
  createdAt DateTime            @default(now())

  @@index([type])
}

model CollectionProduct {
  id           Int        @id @default(autoincrement())
  collectionId Int
  productId    Int
  collection   Collection @relation(fields: [collectionId], references: [id])
  product      Product    @relation(fields: [productId], references: [id])

  @@unique([collectionId, productId])
  @@index([collectionId])
  @@index([productId])
}
